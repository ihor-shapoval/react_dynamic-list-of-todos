{"version":3,"sources":["api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["request","url","fetch","then","response","ok","Error","status","statusText","json","getUser","userId","TodoList","state","todos","query","filterBy","handleChange","event","value","target","setState","handleSelect","randomize","prevState","sort","Math","random","getPreparedTodos","preparedTodos","filter","todo","title","toLocaleLowerCase","includes","completed","a","this","props","selectUser","selectedUserId","visibleTodos","className","type","placeholder","onChange","onClick","map","classNames","checked","readOnly","id","React","Component","CurrentUser","user","loadUser","prevProps","clearSelectUser","name","email","phone","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ad581d4f.chunk.js","sourcesContent":["// eslint-disable-next-line\nconst BASE_URL = \"https://mate.academy/students-api\";\n\nconst request = (url:string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getTodos = () => request('/todos');\n\nexport const getUser = (userId:number) => {\n  return request(`/users/${userId}`);\n};\n","import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { getTodos } from '../../api/api';\n\ninterface State {\n  todos: Todo[];\n  query: string,\n  filterBy: string,\n}\n\ninterface Props {\n  selectedUserId: number;\n  selectUser: (userId:number) => void;\n}\n\nexport class TodoList extends React.Component <Props, State> {\n  state: State = {\n    todos: [],\n    query: '',\n    filterBy: '',\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    this.setState({ query: value });\n  };\n\n  handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    this.setState({ filterBy: value });\n  };\n\n  randomize = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.sort(() => Math.random() - 0.5),\n    }));\n  };\n\n  getPreparedTodos = () => {\n    const { todos, query, filterBy } = this.state;\n\n    let preparedTodos = todos.filter(todo => (\n      todo.title.toLocaleLowerCase().includes(query.toLocaleLowerCase())\n    ));\n\n    preparedTodos = preparedTodos.filter(todo => {\n      switch (filterBy) {\n        case 'active':\n          return !todo.completed;\n        case 'completed':\n          return todo.completed;\n        case 'all':\n        default:\n          return todo;\n      }\n    });\n\n    return preparedTodos;\n  };\n\n  render() {\n    const { query, filterBy } = this.state;\n    const { selectUser, selectedUserId } = this.props;\n    const visibleTodos = this.getPreparedTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__filter\">\n          <div className=\"TodoList__filters\">\n            <input\n              type=\"text\"\n              placeholder=\"Search\"\n              value={query}\n              onChange={this.handleChange}\n            />\n\n            <select\n              value={filterBy}\n              onChange={this.handleSelect}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"active\">Active</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </div>\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={this.randomize}\n          >\n            Randomize\n          </button>\n        </div>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {visibleTodos.map((todo) => (\n              <li\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  },\n                )}\n                key={todo.id}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  type=\"button\"\n                  className={classNames(\n                    'TodoList__user-button button',\n                    {\n                      'TodoList__user-button--selected': todo.userId === selectedUserId,\n                    },\n                  )}\n                  onClick={() => {\n                    selectUser(todo.userId);\n                  }}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\ninterface Props {\n  userId: number;\n  clearSelectUser: () => void;\n}\n\ntype State = {\n  user: User | null;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state:State = {\n    user: null,\n  };\n\n  async componentDidMount() {\n    this.loadUser();\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUser();\n    }\n  }\n\n  loadUser = async () => {\n    const user = await getUser(this.props.userId);\n\n    this.setState({ user });\n  };\n\n  render() {\n    const { user } = this.state;\n    const { clearSelectUser } = this.props;\n\n    if (!user) {\n      return (\n        <div>User not found</div>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {user.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          type=\"button\"\n          className=\"button button--clear\"\n          onClick={clearSelectUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ninterface State {\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n  };\n\n  selectUser = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  clearSelectUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            selectedUserId={selectedUserId}\n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearSelectUser={this.clearSelectUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}